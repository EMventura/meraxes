import os
import glob
import sys
import shutil
import subprocess
from SCons.Script.SConscript import SConsEnvironment

# =====================
# = Utility functions =
# =====================

def files(pattern, exclude=''): 
    """All files matching a pattern, excluding
    directories and any specified patterns.""" 
    return [file for file in glob.glob(pattern) if (os.path.isfile(file)
            and file not in glob.glob(exclude))]

def copy_files(file_list, dest):
    for f in file_list:
        shutil.copy(f, dest)
SConsEnvironment.CopyFiles = lambda env, file_list, dest: copy_files(file_list, dest)

# ============================
# = Command line definitions =
# ============================

# Create the environment
env = Environment(ENV=os.environ)

# Define the command for building a tags file
tagsources = Glob("*.[ch]")
ctags = env.Command('ctags', tagsources, "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q") 

# =================================
# = System specific build options =
# =================================

env.AppendUnique(LIBS=['gsl', 'gslcblas', 'm', 'fftw3f'])
HDF5_LIBS = ['z', 'libhdf5_hl', 'libhdf5']

GIT         = ['/usr/bin/git']
GSL_INCL    = ['/usr/local/x86_64/gnu/gsl-1.9/include']
GSL_LIBS    = ['/usr/local/x86_64/gnu/gsl-1.9/lib']
LEVMAR_INCL = ['/home/smutch/3rd_party/levmar']
LEVMAR_LIBS = ['/home/smutch/3rd_party/levmar']
GBP_INCL    = ['/home/smutch/3rd_party/gbpCode/myInclude']
GBP_LIBS    = ['/home/smutch/3rd_party/gbpCode/myLib/mpi']
FFTW_INCL   = ['/home/smutch/3rd_party/fftw-3.3.3/include']
FFTW_LIBS   = ['/home/smutch/3rd_party/fftw-3.3.3/lib']
CC          = ['/usr/local/x86_64/gnu/openmpi-1.6.1/bin/mpicc']

env.Replace(CC = CC)
env.AppendUnique(CPPPATH = ["./"])
env.AppendUnique(CPPPATH = [GSL_INCL, GBP_INCL, FFTW_INCL])
env.AppendUnique(LIBPATH = [GSL_LIBS, GBP_LIBS, FFTW_LIBS])
env.AppendUnique(LIBS = HDF5_LIBS)
env.AppendUnique(CPPFLAGS = '-std=gnu99')

node_list = files('*.c')
target = env.StaticLibrary(target='../lib/21cmfast', source=node_list)
headers_target = env.CopyFiles(files('*.h'), '../include')
Depends(headers_target, target)
Default(target)
