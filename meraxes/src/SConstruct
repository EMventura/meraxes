import os
import glob
import sys
import subprocess
import shutil
from SCons.Script.SConscript import SConsEnvironment

# =====================
# = Utility functions =
# =====================

def files(pattern, exclude=''):
    """All files matching a pattern, excluding
    directories and any specified patterns."""
    return [file for file in glob.glob(pattern) if (os.path.isfile(file)
            and file not in glob.glob(exclude))]

def copy_files(file_list, dest):
    for f in file_list:
        shutil.copy(f, dest)
SConsEnvironment.CopyFiles = lambda env, file_list, dest: copy_files(file_list, dest)


def create_git_header(git_executable):
    header = """/*
* This file has been automatically generated.  Any modifications will be
* overwritten during compilation.
*/
"""

    ref = subprocess.check_output(git_executable[0]+' show-ref --head | head -n 1 | cut -d " " -f 1',
            cwd = Dir('.').path,
            shell = True).rstrip('\n')

    diff = subprocess.check_output(git_executable[0]+' diff --no-color',
            cwd = Dir('.').path,
            shell = True)

    diff_defn = ""
    for l in diff.splitlines():
       diff_defn += '"'+l.replace('\\', '\\\\').replace('"', '\\"')+'\\n"\\\n'

    with open("git.h", "w") as fd:
        fd.write(header+"\n")
        fd.write('#define GITREF_STR "%s"\n\n' % ref)
        fd.write('#define GITDIFF_STR %s\n' % diff_defn)

SConsEnvironment.CreateGitHeader = lambda env, git_executable: create_git_header(git_executable)


# ============================
# = Command line definitions =
# ============================
vars = Variables()

vars = Variables('config.py') # Persistent storage.
vars.AddVariables(
    ('nout', 'Set the number of output snapshots.', 1),
    BoolVariable('calc_mags', 'Calculate magnitudes.', False),
    BoolVariable('tocf', 'Calculate xH structure with 21cmFAST.', False),
    ('allocparameter', 'Set the ALLOCPARAM value.', 5.0),
    EnumVariable('build', 'Set the build type.', 'optimised', allowed_values=('debug', 'optimised')),
    BoolVariable('prof', 'Enable profiling.', False),
    BoolVariable('mpi', 'Build with mpi', True),
)

# Create the environment
env = Environment(variables = vars, ENV=os.environ)

# Check if there were any unkown variables on the command line.
unknown = vars.UnknownVariables()
if unknown:
    print 'Unknown variables:', unknown.keys()
    env.Exit(1)

# Take a snapshot of provided options before we continue.
vars.Save('config.py', env)

# Generate a help line later use.
Help(vars.GenerateHelpText(env))

# Define the command for building a tags file
tagsources = Glob("*.[ch]")
ctags = env.Command('ctags', tagsources, "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q")

# If the user requested help don't bother continuing with the build.
if not GetOption('help'):

    # Modify the environment based on any of our variables.
    env.AppendUnique(CPPDEFINES=['NOUT=${nout}'])
    if env['calc_mags']:
        env.AppendUnique(CPPDEFINES=['CALC_MAGS'])
    if env['tocf']:
        env.AppendUnique(CPPDEFINES=['USE_TOCF'])
    if env['build'] == 'debug':
        env.MergeFlags('-g -O0 -Wall')
        env.AppendUnique(CPPDEFINES=['DEBUG'])
    elif env['build'] == 'optimised':
        env.MergeFlags('-O2')
    if env['prof']:
        env.MergeFlags('-g -pg')
        env.AppendUnique(LINKFLAGS=['-pg'])
    if env['mpi']:
        env.AppendUnique(CPPDEFINES=['USE_MPI=1'])

    # =================================
    # = System specific build options =
    # =================================

    if sys.platform == 'darwin':
        SYSTEM = 'mac'
    elif sys.platform == 'linux2':
        SYSTEM = 'gstar'
        # SYSTEM = 'green'

    env.AppendUnique(LIBS=['gbpMath','gbpLib','gsl', 'gslcblas', 'm'])
    HDF5_LIBS = ['z', 'libhdf5_hl', 'libhdf5']

    if SYSTEM=='green':
        GSL_INCL    = ['/usr/local/gnu/x86_64/gsl/include']
        GSL_LIBS    = ['/usr/local/gnu/x86_64/gsl/lib']
        LEVMAR_INCL = ['/home/ssi/smutch/Packages/src/levmar']
        LEVMAR_LIBS = ['/home/ssi/smutch/Packages/src/levmar']
        GBP_INCL    = ['/home/ssi/smutch/Work/3rd_party/libs/gbpCode/myInclude']
        GBP_LIBS    = ['/home/ssi/smutch/Work/3rd_party/libs/gbpCode/myLib/mpi']
        FITSIO_INCL = ['/home/ssi/smutch/Work/3rd_party/libs/cfitsio/include']
        FITSIO_LIBS = ['/home/ssi/smutch/Work/3rd_party/libs/cfitsio/lib']
        SPRNG_INCL  = ['/home/ssi/smutch/Work/3rd_party/libs/sprng/include']
        SPRNG_LIBS  = ['/home/ssi/smutch/Work/3rd_party/libs/sprng/lib']
        CC          = ['/usr/local/gnu/x86_64/openmpi-1.4/bin/mpicc']
        GIT         = ['/usr/local/git-1.7.4/bin/git']

    elif SYSTEM=='gstar':
        GIT         = ['/usr/bin/git']
        GSL_INCL    = ['/usr/local/x86_64/gnu/gsl-1.9/include']
        GSL_LIBS    = ['/usr/local/x86_64/gnu/gsl-1.9/lib']
        LEVMAR_INCL = ['/home/smutch/3rd_party/levmar']
        LEVMAR_LIBS = ['/home/smutch/3rd_party/levmar']
        GBP_INCL    = ['/home/smutch/3rd_party/gbpCode/myInclude']
        GBP_LIBS    = ['/home/smutch/3rd_party/gbpCode/myLib']
        FFTW_INCL   = ['/home/smutch/3rd_party/fftw-3.3.3/include']
        FFTW_LIBS   = ['/home/smutch/3rd_party/fftw-3.3.3/lib']
        TOCF_INCL   = ['../../21cmfast/include']
        TOCF_LIBS   = ['../../21cmfast/lib']
        if env['mpi']:
            CC        = ['/usr/local/x86_64/gnu/openmpi-1.6.1/bin/mpicc']
            GBP_LIBS  = [GBP_LIBS[0]+'/mpi']
        else:
            CC      = ['cc']

    elif SYSTEM=='mac':
        GSL_INCL    = ['/usr/local/include']
        GSL_LIBS    = ['/usr/local/lib']
        LEVMAR_INCL = ['/Users/smutch/3rd_party/levmar-2.6']
        LEVMAR_LIBS = ['/Users/smutch/3rd_party/levmar-2.6']
        GBP_INCL    = ['/Users/smutch/3rd_party/gbpCode/myInclude']
        GBP_LIBS    = ['/Users/smutch/3rd_party/gbpCode/myLib']
        GIT         = ['/usr/bin/git']
        TOCF_INCL   = ['../../21cmfast/include']
        TOCF_LIBS   = ['../../21cmfast/lib']
        FFTW_INCL   = ['/Users/smutch/3rd_party/fftw-3.3.3/include']
        FFTW_LIBS   = ['/Users/smutch/3rd_party/fftw-3.3.3/lib']
        if env['mpi']:
            CC        = ['mpicc']
            GBP_LIBS  = [GBP_LIBS[0]+'/mpi']
        else:
            CC      = ['gcc']


    env.Replace(CC = CC)
    env.AppendUnique(CPPPATH = ["./"])
    env.AppendUnique(CPPPATH = [GSL_INCL, GBP_INCL])
    env.AppendUnique(LIBPATH = [GSL_LIBS, GBP_LIBS])
    env.AppendUnique(LIBS = HDF5_LIBS)
    env.AppendUnique(CPPFLAGS = '-std=gnu99')

    if env['tocf']:
        env.AppendUnique(CPPPATH = [TOCF_INCL, FFTW_INCL])
        env.AppendUnique(LIBPATH = [TOCF_LIBS, FFTW_LIBS])
        env.AppendUnique(LIBS = ['21cmfast', 'fftw3f_omp', 'fftw3f', 'gomp'])
        env.AppendUnique(CC = ['-fopenmp',])


    # Set the python environment to use in any python scripts.
    if 'VIRTUAL_ENV' in os.environ:
        python = os.environ['VIRTUAL_ENV']+'/bin/python'

    node_list = files('**/*.c')
    target = env.Program(target='../bin/meraxes', source=node_list)
    git_header = env.CreateGitHeader(GIT)
    Depends(target, git_header)
    # env.NoClean(target)
    Default(target)

    lib = env.StaticLibrary(target='../lib/meraxes', source=node_list)
    incl = env.CopyFiles(files('*.h'), '../include')
    Depends(incl, git_header)
    Depends(lib, incl)
    env.Alias('lib', lib)

    # Testing alias
    test = env.Command('test', [target], """cp $SOURCE /home/smutch/data/meraxes/GiggleZ_MR_no_ghost_test/debug/uvb/""")
