import os
import glob
import sys
import subprocess
import shutil
from SCons.Script.SConscript import SConsEnvironment

# Get the library dependencies for this system
from deps import deps

# =====================
# = Utility functions =
# =====================

def files(pattern, exclude=''):
    """All files matching a pattern, excluding
    directories and any specified patterns."""
    return [file for file in glob.glob(pattern) if (os.path.isfile(file)
            and file not in glob.glob(exclude))]


def copy_files(file_list, dest):
    """Copy a list of files to `dest`"""
    for f in file_list:
        shutil.copy(f, dest)

SConsEnvironment.CopyFiles = lambda env, file_list, dest: copy_files(file_list, dest)


def PhonyTarget(env = None, **kw):
    if not env: env = DefaultEnvironment()
    for target,action in kw.items():
        env.AlwaysBuild(env.Alias(target, [], action))


def create_git_header(git_executable):

    """Create the git.h header file."""

    header = """/*
* This file has been automatically generated.  Any modifications will be
* overwritten during compilation.
*/
"""

    ref = subprocess.check_output(git_executable[0]+' show-ref --head | head -n 1 | cut -d " " -f 1',
            cwd = Dir('.').path,
            shell = True).rstrip('\n')

    diff = subprocess.check_output(git_executable[0]+' diff --no-color',
            cwd = Dir('.').path,
            shell = True)

    diff_defn = ""
    if len(diff) > 0:
        for l in diff.splitlines():
           diff_defn += '"'+l.replace('\\', '\\\\').replace('"', '\\"')+'\\n"\\\n'
    else:
        diff_defn = '""'

    with open("git.h", "w") as fd:
        fd.write(header+"\n")
        fd.write('#define GITREF_STR "%s"\n\n' % ref)
        fd.write('#define GITDIFF_STR %s\n' % diff_defn)

SConsEnvironment.CreateGitHeader = lambda env, git_executable: create_git_header(git_executable)


def compile_against(libs, deps, env):
    """Compile against a list of libraries with with paths etc. defined in
    `deps`."""
    for name in libs:
        dep = deps[name]
        if dep['inclp'] is not None:
            env.AppendUnique(CPPPATH = [dep['inclp']])
        if dep['libp'] is not None:
            env.AppendUnique(LIBPATH = [dep['libp']])
        if dep['lib'] is not None:
            env.AppendUnique(LIBS = [dep['lib']])


def prepend_user_defines(env, header_file):
    """Prepend the user defined definitions (i.e. CPPDEFINES) to a header
    file."""

    defs = "// These defines were added at compilation time\n"\
           "// (see SConstruct prepend_user_defines())\n"
    for v in env["CPPDEFINES"]:
        v = env.subst(v[0])
        defs += "#define "+v.replace("=", " ")+"\n"
    defs += "// -------------------------------------------\n\n"

    with open(header_file, "r") as fd:
        original = fd.read()
    with open(header_file, "w") as fd:
        fd.write(defs+"\n"+original)

SConsEnvironment.PrependUserDefines = prepend_user_defines

# ============================
# = Command line definitions =
# ============================
vars = Variables()

vars = Variables('config.py') # Persistent storage.
vars.AddVariables(
    BoolVariable('calc_mags', 'Calculate magnitudes.', False),
    ('nout', 'Set the number of output snapshots. (only required if calc_mags=1)', False),
    BoolVariable('tocf', 'Calculate xH structure with 21cmFAST.', False),
    ('allocparameter', 'Set the ALLOCPARAM value.', 5.0),
    EnumVariable('build', 'Set the build type.', 'standard', allowed_values=('debug', 'standard', 'optimized')),
    BoolVariable('prof', 'Enable profiling.', False),
    BoolVariable('mpi', 'Build with mpi', True),
    ('n_history_snaps', 'Set the value of N_HISTORY_SNAPS', False)
)

# Create the environment
env = Environment(variables = vars, ENV=os.environ)

# Check if there were any unkown variables on the command line.
unknown = vars.UnknownVariables()
if unknown:
    print 'Unknown variables:', unknown.keys()
    env.Exit(1)



# =============================================================================
# Print variables
# =============================================================================

print "\nCommand line arguments:"

if env['nout']:
    print "nout = ", env['nout']
if env['tocf']:
    print "tocf = ", env['tocf']
if env['build']:
    print "build =", env['build']

print


# Take a snapshot of provided options before we continue.
vars.Save('config.py', env)

# Generate a help line later use.
Help(vars.GenerateHelpText(env))

# Define the command for building a tags file
tagsources = Glob("*.[ch]")
ctags = env.Command('ctags', tagsources, "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q")

# If the user requested help don't bother continuing with the build.
if not GetOption('help'):

    # Modify the environment based on any of our variables.
    if env['calc_mags']:
        env.AppendUnique(CPPDEFINES = ['CALC_MAGS'])
        env.AppendUnique(CPPDEFINES = ['NOUT=${nout}'])
    if env['build'] == 'debug':
        env.MergeFlags('-g -O0 -Wall -DDEBUG')
    elif env['build'] == 'standard':
        env.MergeFlags('-O2 -march=native')
    elif env['build'] == 'optimized':
        env.MergeFlags('-O3 -DNDEBUG -march=native')
    if env['prof']:
        env.MergeFlags('-g -pg')
        env.AppendUnique(LINKFLAGS=['-pg'])
    if env['mpi']:
        env.AppendUnique(CPPDEFINES = ['USE_MPI=1'])
    if env['n_history_snaps']:
        env.AppendUnique(CPPDEFINES = ['N_HISTORY_SNAPS=${n_history_snaps}'])


    # =============================================================================
    # Check to see if directories required for build exist and if not, create them
    # =============================================================================

    dirname = os.path.dirname("../include/")
    if not os.path.exists(dirname):
        os.makedirs(dirname)


    # =================================
    # = System specific build options =
    # =================================

    if env['mpi']:
        env.Replace(CC = deps['exec']['mpicc'])
        deps['gbpCode']['libp'] = os.path.join(deps['gbpCode']['libp'], 'mpi')
    else:
        env.Replace(CC = deps['exec']['cc'])

    env.AppendUnique(CPPFLAGS = '-std=gnu99')
    env.AppendUnique(CPPPATH = './')

    libs = ['gsl', 'hdf5', 'gbpCode', 'fftw']
    compile_against(libs, deps, env)

    # Set the python environment to use in any python scripts.
    if 'VIRTUAL_ENV' in os.environ:
        python = os.environ['VIRTUAL_ENV']+'/bin/python'


    # ===========
    # = Targets =
    # ===========

    node_list = files('**/*.c', exclude='tests/*')
    target = env.Program(target='../bin/meraxes', source=node_list)
    git_header = env.CreateGitHeader([deps['exec']['git']])
    Depends(target, git_header)
    # env.NoClean(target)
    Default(target)

    node_list.remove("core/meraxes.c")
    lib = env.StaticLibrary(target='../lib/meraxes', source=node_list)
    incl = env.CopyFiles(files('*.h'), '../include')
    defs = env.PrependUserDefines("../include/meraxes.h")
    Depends(incl, git_header)
    Depends(defs, incl)
    Depends(lib, incl)
    env.Alias('lib', lib)

    SConscript('tests/SConscript', exports='env lib deps compile_against PhonyTarget')

    # If you create a my_SConscript file then you can put your own custom
    # targets etc. in there...
    if os.path.exists("./my_SConscript"):
        SConscript('my_SConscript', exports='env target lib copy_files files PhonyTarget')
