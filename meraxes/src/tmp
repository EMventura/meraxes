9a10
> from deps.termcolor import cprint
72d72
<             env.AppendUnique(RPATH = [dep['libp']])
102d101
<     ('nout', 'Set the number of output snapshots.', 1),
104c103
<     BoolVariable('tocf', 'Calculate xH structure with 21cmFAST.', False),
---
>     ('nout', 'Set the number of output snapshots. (only required if calc_mags=1)', False),
131,132d129
< if env['tocf']:
<     print "tocf = ", env['tocf']
147c144,149
< ctags = env.Command('ctags', tagsources, "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q")
---
> tagsclean = AlwaysBuild(env.Command('tagsclean', None, 'rm -vf tags'))
> ctags = env.Command('ctags', [tagsources, tagsclean], "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q")
> 
> # Command for build cscope database
> csclean = AlwaysBuild(env.Command('csclean', None, 'rm -vf cscope.out'))
> AlwaysBuild(env.Alias('cscope', Command('cscope.out', csclean, 'cscope -bRv')))
153d154
<     env.AppendUnique(CPPDEFINES = ['NOUT=${nout}'])
156,157c157
<     if env['tocf']:
<         env.AppendUnique(CPPDEFINES = ['USE_TOCF'])
---
>         env.AppendUnique(CPPDEFINES = ['NOUT=${nout}'])
161c161
<         env.AppendUnique(CPPPLAGS = ['O2'])
---
>         env.MergeFlags('-O2')
163c163,164
<         env.MergeFlags('-O2 -DNDEBUG')
---
>         cprint("WARNING: This build will only work on the EXACT same architecture!", color='yellow', attrs=['bold'])
>         env.MergeFlags('-O3 -DNDEBUG -march=native')
192,194c193
<     env.AppendUnique(CPPFLAGS = '-std=gnu99 ')
<     #env.AppendUnique(CPPFLAGS = '-march=native -O3 ')
<     env.AppendUnique(CPPFLAGS = '-march=native -xhost -O3 -ipo -g ')
---
>     env.AppendUnique(CPPFLAGS = '-std=gnu99')
195a195
>     env.AppendUnique(SHCCFLAGS = '-rdynamic')
197c197
<     libs = ['gsl', 'hdf5', 'gbpCode']
---
>     libs = ['gsl', 'hdf5', 'gbpCode', 'fftw']
200,204d199
<     if env['tocf']:
<         libs = ['21cmfast', 'fftw']
<         compile_against(libs, deps, env)
<         env.AppendUnique(CC = ['-openmp',])
< 
214,215c209,210
<     node_list = files('**/*.c')
<     target = env.Program(target='../bin/meraxes', source=node_list)
---
>     node_list = files('**/*.c', exclude='tests/*')
>     executable = env.Program(target='../bin/meraxes', source=node_list)
217,219c212,214
<     Depends(target, git_header)
<     # env.NoClean(target)
<     Default(target)
---
>     Depends(executable, git_header)
>     # env.NoClean(executable)
>     Default(executable)
222a218
>     dynlib = env.SharedLibrary(target='../lib/meraxes', source=node_list)
227a224
>     Depends(dynlib, incl)
228a226
>     env.Alias('dynlib', dynlib)
233c231
<         SConscript('my_SConscript', exports='env target lib copy_files files')
---
>         SConscript('my_SConscript', exports='env executable lib copy_files files')
