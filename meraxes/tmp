diff --git a/meraxes/input/Tiamat.par b/meraxes/input/Tiamat.par
index 9700430..d412899 100644
--- a/meraxes/input/Tiamat.par
+++ b/meraxes/input/Tiamat.par
@@ -87,7 +87,7 @@ MergerBurstScaling        : 0.7
 # Reionization
 ReionTcool             : 1.0e4
 ReionNionPhotPerBary   : 4000
-ReionEscapeFrac        : 0.2
+ReionEscapeFrac        : 0.30
 
 ReionSobacchi_Zre      : 9.3
 ReionSobacchi_DeltaZre : 1.0
diff --git a/meraxes/input/Tiny_Tiamat.par b/meraxes/input/Tiny_Tiamat.par
index 0bd94ca..24244ec 100644
--- a/meraxes/input/Tiny_Tiamat.par
+++ b/meraxes/input/Tiny_Tiamat.par
@@ -36,9 +36,8 @@ RandomSeed             : 1809  # seed for random number generator
 #----- 21cmFAST ---------------------------
 #------------------------------------------
 TOCF_Flag : 0 {  # use 21cmfast for reionization?
-    numcores   : 1          # number of OpenMP threads to run 21cmFAST with
+    numcores   : 8          # number of OpenMP threads to run 21cmFAST with
     LogFileDir : tocf_logs  # directory for log files
-    HII_dim    : 256
 }
 
 #------------------------------------------
@@ -87,7 +86,7 @@ MergerBurstScaling        : 0.7
 # Reionization
 ReionTcool             : 1.0e4
 ReionNionPhotPerBary   : 4000
-ReionEscapeFrac        : 0.2
+ReionEscapeFrac        : 0.30
 
 ReionSobacchi_Zre      : 9.3
 ReionSobacchi_DeltaZre : 1.0
diff --git a/meraxes/output/results/allresults.py b/meraxes/output/results/allresults.py
index 733ef4d..305e94d 100644
--- a/meraxes/output/results/allresults.py
+++ b/meraxes/output/results/allresults.py
@@ -88,7 +88,7 @@ if __name__ == '__main__':
         # SMF
         fig, ax = plt.subplots(1,1)
         model = Smf(fname, -1, snapshot=snap)
-        smf_z5.plot(model, ax, h)
+        smf_z5.plot(model, ax)
         ax.yaxis.set_tick_params(which='both', color='w')
         ax.legend(loc="upper right", fontsize="small")
         savefig(fig, fname, "smf-z5", ext, simprops)
@@ -124,7 +124,7 @@ if __name__ == '__main__':
         # SMF
         fig, ax = plt.subplots(1,1)
         model = Smf(fname, -1, snapshot=snap)
-        smf_z6.plot(model, ax, h)
+        smf_z6.plot(model, ax)
         ax.yaxis.set_tick_params(which='both', color='w')
         ax.legend(loc="upper right", fontsize="small")
         savefig(fig, fname, "smf-z6", ext, simprops)
@@ -148,7 +148,7 @@ if __name__ == '__main__':
         # SMF
         fig, ax = plt.subplots(1,1)
         model = Smf(fname, -1, snapshot=snap)
-        smf_z7.plot(model, ax, h)
+        smf_z7.plot(model, ax)
         ax.yaxis.set_tick_params(which='both', color='w')
         ax.legend(loc="upper right", fontsize="small")
         savefig(fig, fname, "smf-z7", ext, simprops)
diff --git a/meraxes/output/results/smf.py b/meraxes/output/results/smf.py
index 4183d06..9c7a19a 100644
--- a/meraxes/output/results/smf.py
+++ b/meraxes/output/results/smf.py
@@ -113,12 +113,10 @@ class Smf(object):
         self.masses = np.log10(masses*1e10)
 
     def read_masses(self):
-        sm = meraxes.io.read_gals(self.fname, snapshot=self.snapshot,
-                                  props=["StellarMass",],
-                                  quiet=True)["StellarMass"]
-        # drop zeros
-        sel = sm > 0
-        self.masses = np.log10(sm[sel]*1e10)
+        props = ("StellarMass",)
+        gals = meraxes.io.read_gals(self.fname, snapshot=self.snapshot,
+                                    props=props, quiet=True)
+        self.masses = np.log10(gals["StellarMass"]*1e10)
 
     def generate(self, bins="knuth", limits=None):
         if self.masses is None:
diff --git a/meraxes/output/results/smf_z5.py b/meraxes/output/results/smf_z5.py
index 462208d..3135b8b 100644
--- a/meraxes/output/results/smf_z5.py
+++ b/meraxes/output/results/smf_z5.py
@@ -23,14 +23,14 @@ __author__ = "Simon Mutch"
 __date__ = "2015-04-14"
 
 COLS = plt.rcParams["axes.color_cycle"]
-COLS = ['0.6',]*len(COLS)
+#  COLS = ['0.4',]*len(COLS)
 #  COLS = [COLS[9],]*len(COLS)
 OBS_DATASETS_DIR = "/home/smutch/models/21cm_sam/meraxes/utils/obs_datasets"
 XLIM = [6, 12]
 YLIM = [-6, 1]
 
 
-def plot_obs(ax, logy=True, hubble=0.678):
+def plot_obs(ax, logy=True):
     # Start with Duncan+ 2014 (h=0.702, Chabrier IMF)
     obs = pd.read_table(os.path.join(__script_dir__,
         "{:s}/smf/Duncan14_MF_z5.txt".format(OBS_DATASETS_DIR)),
@@ -41,10 +41,10 @@ def plot_obs(ax, logy=True, hubble=0.678):
     obs.merr[obs.merr >= obs.phi] = obs.phi - 1e-10
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.702/hubble)
+    obs.sm += 2.0*np.log10(0.702/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["phi", "merr", "perr"]:
-        obs[col] /= (0.702**3/hubble**3)
+        obs[col] /= (0.702**3/HUBBLE**3)
 
     # plot the observations
     if logy:
@@ -60,10 +60,10 @@ def plot_obs(ax, logy=True, hubble=0.678):
                     lw=2, capsize=2.5, marker='o', mec='None')
 
     # now plot Grazian+ 2015 (h=0.7, Salpeter IMF)
-    mass = np.linspace(9.323 + 2.0*np.log10(0.7/hubble), XLIM[1], 30)
+    mass = np.linspace(9.323 + 2.0*np.log10(0.7/HUBBLE), XLIM[1], 30)
     phi = np.log10(schechter(10.78, -4.18, -1.63,
-                             mass + 2.0*np.log10(hubble/0.7)))\
-            + 3.0*np.log10(hubble/0.7)
+                             mass + 2.0*np.log10(HUBBLE/0.7)))\
+            + 3.0*np.log10(HUBBLE/0.7)
     ax.plot(mass, phi, ls="--", label="Grazian et al. 2015", color=COLS[3],
             lw=3)
 
@@ -76,10 +76,10 @@ def plot_obs(ax, logy=True, hubble=0.678):
         names = ["sm", "log_phi", "m_err", "p_err"])
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.7/hubble)
+    obs.sm += 2.0*np.log10(0.7/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["log_phi", "m_err", "p_err"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
     if logy:
@@ -98,9 +98,9 @@ def plot_obs(ax, logy=True, hubble=0.678):
                      format='ascii.ecsv')
 
     # convert obs to same hubble value and IMF
-    obs['logM'] += 2.0*np.log10(0.7/hubble)
+    obs['logM'] += 2.0*np.log10(0.7/HUBBLE)
     for col in ["logphi", "merr", "perr"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
     if logy:
@@ -115,11 +115,11 @@ def plot_obs(ax, logy=True, hubble=0.678):
                     lw=2, capsize=2.5, marker='D', mec='None')
 
 
-def plot(model, ax, hubble, bins=30):
+def plot(model, ax, bins="knuth"):
     model.generate(limits=XLIM, bins=bins)
     # model.gen_uncert(20)
     model.plot(ax, label="Meraxes", lw=4)
-    plot_obs(ax, hubble)
+    plot_obs(ax)
 
     model.set_axlabel(ax)
     ax.axis(XLIM + YLIM)
@@ -136,12 +136,12 @@ if __name__ == '__main__':
     fname = args["<fname>"]
 
     # set up
-    hubble = meraxes.set_little_h(fname)
+    meraxes.set_little_h(fname)
     plt.style.use(["dragons", ])
     fig, ax = plt.subplots(1, 1)
 
     model = Smf(fname, 5.0)
-    plot(model, ax, hubble)
+    plot(model, ax)
 
     # save
     plt.tight_layout()
diff --git a/meraxes/output/results/smf_z6.py b/meraxes/output/results/smf_z6.py
index efa9f9c..a846dc2 100644
--- a/meraxes/output/results/smf_z6.py
+++ b/meraxes/output/results/smf_z6.py
@@ -26,9 +26,10 @@ COLS = plt.rcParams["axes.color_cycle"]
 OBS_DATASETS_DIR = "/home/smutch/models/21cm_sam/meraxes/utils/obs_datasets"
 XLIM = [6, 12]
 YLIM = [-6, 1]
+HUBBLE = 0.7
 
 
-def plot_obs(ax, logy=True, hubble=0.678):
+def plot_obs(ax, logy=True):
     # Start with Duncan+ 2014
     obs = pd.read_table(os.path.join(__script_dir__,
         "{:s}/smf/Duncan14_MF_z6.txt".format(OBS_DATASETS_DIR)),
@@ -39,10 +40,10 @@ def plot_obs(ax, logy=True, hubble=0.678):
     obs.merr[obs.merr >= obs.phi] = obs.phi - 1e-10
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.702/hubble)
+    obs.sm += 2.0*np.log10(0.702/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["phi", "merr", "perr"]:
-        obs[col] /= (0.7**3/hubble**3)
+        obs[col] /= (0.7**3/HUBBLE**3)
 
     # plot the observations
     if logy:
@@ -58,10 +59,10 @@ def plot_obs(ax, logy=True, hubble=0.678):
                     lw=2, capsize=2.5, marker='o', mec='None')
 
     # now plot Grazian+ 2015 (h=0.7, Salpeter IMF)
-    mass = np.linspace(9.5 + 2.0*np.log10(0.7/hubble), XLIM[1], 30)
+    mass = np.linspace(9.5 + 2.0*np.log10(0.7/HUBBLE), XLIM[1], 30)
     phi = np.log10(schechter(10.49, -4.16, -1.55,
-                             mass + 2.0*np.log10(hubble/0.7)))\
-            + 3.0*np.log10(hubble/0.7)
+                             mass + 2.0*np.log10(HUBBLE/0.7)))\
+            + 3.0*np.log10(HUBBLE/0.7)
     ax.plot(mass, phi, ls="--", label="Grazian et al. 2015", color=COLS[3],
             lw=3)
 
@@ -74,21 +75,21 @@ def plot_obs(ax, logy=True, hubble=0.678):
         names = ["sm", "log_phi", "m_err", "p_err"])
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.7/hubble)
+    obs.sm += 2.0*np.log10(0.7/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["log_phi", "m_err", "p_err"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
     if logy:
         ax.errorbar(obs.sm, obs.log_phi, yerr=[obs.m_err, obs.p_err],
-                    label="Gonzalez et al. 2011", ls="None", color=COLS[2],
+                    label="Gonzalez et al. 2011", ls="None", color=COLS[1],
                     lw=2, capsize=2.5, marker='s', mec='None')
     else:
         ax.errorbar(obs.sm, 10.**obs.log_phi,
                     yerr=[10.**obs.log_phi - 10.**(obs.log_phi - obs.m_err),
                           10.**(obs.p_err + obs.log_phi) - 10.**obs.log_phi],
-                    label="Gonzalez et al. 2011", ls="None", color=COLS[2],
+                    label="Gonzalez et al. 2011", ls="None", color=COLS[1],
                     lw=2, capsize=2.5, marker='s', mec='None')
 
     # now plot Song+ 2015 (h=0.7, Salpeter IMF)
@@ -96,9 +97,9 @@ def plot_obs(ax, logy=True, hubble=0.678):
                      format='ascii.ecsv')
 
     # convert obs to same hubble value and IMF
-    obs['logM'] += 2.0*np.log10(0.7/hubble)
+    obs['logM'] += 2.0*np.log10(0.7/HUBBLE)
     for col in ["logphi", "merr", "perr"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
     if logy:
@@ -113,11 +114,11 @@ def plot_obs(ax, logy=True, hubble=0.678):
                     lw=2, capsize=2.5, marker='D', mec='None')
 
 
-def plot(model, ax, hubble, bins="knuth"):
+def plot(model, ax, bins="knuth"):
     model.generate(limits=XLIM, bins=bins)
     # model.gen_uncert(20)
     model.plot(ax, label="Meraxes", lw=4)
-    plot_obs(ax, hubble)
+    plot_obs(ax)
 
     model.set_axlabel(ax)
     ax.axis(XLIM + YLIM)
@@ -134,12 +135,12 @@ if __name__ == '__main__':
     fname = args["<fname>"]
 
     # set up
-    hubble = meraxes.set_little_h(fname)
+    meraxes.set_little_h(HUBBLE)
     plt.style.use(["dragons", ])
     fig, ax = plt.subplots(1, 1)
 
     model = Smf(fname, 6.0)
-    plot(model, ax, hubble)
+    plot(model, ax)
 
     # save
     plt.tight_layout()
diff --git a/meraxes/output/results/smf_z7.py b/meraxes/output/results/smf_z7.py
index e28ea57..13ebc07 100644
--- a/meraxes/output/results/smf_z7.py
+++ b/meraxes/output/results/smf_z7.py
@@ -26,9 +26,10 @@ COLS = plt.rcParams["axes.color_cycle"]
 OBS_DATASETS_DIR = "/home/smutch/models/21cm_sam/meraxes/utils/obs_datasets"
 XLIM = [6, 12]
 YLIM = [-6, 1]
+HUBBLE = 0.7
 
 
-def plot_obs(ax, hubble=0.678):
+def plot_obs(ax):
     # Start with Duncan+ 2014
     obs = pd.read_table(os.path.join(__script_dir__,
         "{:s}/smf/Duncan14_MF_z7.txt".format(OBS_DATASETS_DIR)),
@@ -39,23 +40,23 @@ def plot_obs(ax, hubble=0.678):
     obs.merr[obs.merr >= obs.phi] = obs.phi - 1e-10
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.702/hubble)
+    obs.sm += 2.0*np.log10(0.702/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["phi", "merr", "perr"]:
-        obs[col] /= (0.7**3/hubble**3)
+        obs[col] /= (0.7**3/HUBBLE**3)
 
     # plot the observations
-    ax.errorbar(obs.sm.values, np.log10(obs.phi.values),
+    ax.errorbar(obs.sm, np.log10(obs.phi),
                 yerr=[np.log10(obs.phi / (obs.phi - obs.merr)),
                       np.log10(1.0 + (obs.perr / obs.phi))],
                 label="Duncan et al. 2014", ls="None", color=COLS[1],
                 lw=2, capsize=2.5, marker='o', mec='None')
 
     # now plot Grazian+ 2015 (h=0.7, Salpeter IMF)
-    mass = np.linspace(9.76 + 2.0*np.log10(0.7/hubble), XLIM[1], 30)
+    mass = np.linspace(9.76 + 2.0*np.log10(0.7/HUBBLE), XLIM[1], 30)
     phi = np.log10(schechter(10.69, -5.24, -1.88,
-                             mass + 2.0*np.log10(hubble/0.7)))\
-            + 3.0*np.log10(hubble/0.7)
+                             mass + 2.0*np.log10(HUBBLE/0.7)))\
+            + 3.0*np.log10(HUBBLE/0.7)
     ax.plot(mass, phi, ls="--", label="Grazian et al. 2015", color=COLS[3],
             lw=3)
 
@@ -68,13 +69,13 @@ def plot_obs(ax, hubble=0.678):
         names = ["sm", "log_phi", "m_err", "p_err"])
 
     # convert obs to same hubble value and IMF
-    obs.sm += 2.0*np.log10(0.7/hubble)
+    obs.sm += 2.0*np.log10(0.7/HUBBLE)
     obs.sm += 0.25  # IMF correction Chabrier -> Salpeter
     for col in ["log_phi", "m_err", "p_err"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
-    ax.errorbar(obs.sm.values, obs.log_phi.values, yerr=[obs.m_err.values, obs.p_err.values],
+    ax.errorbar(obs.sm, obs.log_phi, yerr=[obs.m_err, obs.p_err],
                 label="Gonzalez et al. 2011", ls="None", color=COLS[2],
                 lw=2, capsize=2.5, marker='s', mec='None')
 
@@ -83,21 +84,21 @@ def plot_obs(ax, hubble=0.678):
                      format='ascii.ecsv')
 
     # convert obs to same hubble value and IMF
-    obs['logM'] += 2.0*np.log10(0.7/hubble)
+    obs['logM'] += 2.0*np.log10(0.7/HUBBLE)
     for col in ["logphi", "merr", "perr"]:
-        obs[col] -= 3.0*np.log10(0.7/hubble)
+        obs[col] -= 3.0*np.log10(0.7/HUBBLE)
 
     # plot the observations
-    ax.errorbar(np.array(obs['logM'], float), np.array(obs['logphi'], float), yerr=[obs['merr'], obs['perr']],
+    ax.errorbar(obs['logM'], obs['logphi'], yerr=[obs['merr'], obs['perr']],
                 label="Song et al. 2015", ls="None", color=COLS[4],
                 lw=2, capsize=2.5, marker='D', mec='None')
 
 
-def plot(model, ax, hubble, bins="knuth"):
+def plot(model, ax, bins="knuth"):
     model.generate(limits=XLIM, bins=bins)
     # model.gen_uncert(20)
     model.plot(ax, label="Meraxes", lw=4)
-    plot_obs(ax, hubble)
+    plot_obs(ax)
 
     model.set_axlabel(ax)
     ax.axis(XLIM + YLIM)
@@ -114,12 +115,12 @@ if __name__ == '__main__':
     fname = args["<fname>"]
 
     # set up
-    hubble = meraxes.set_little_h(hubble)
+    meraxes.set_little_h(HUBBLE)
     plt.style.use(["dragons", ])
     fig, ax = plt.subplots(1, 1)
 
     model = Smf(fname, 7.0)
-    plot(model, ax, hubble)
+    plot(model, ax)
 
     # save
     plt.tight_layout()
diff --git a/meraxes/output/show_xH_slice.py b/meraxes/output/show_xH_slice.py
index cd32c9b..2741ef0 100644
--- a/meraxes/output/show_xH_slice.py
+++ b/meraxes/output/show_xH_slice.py
@@ -65,9 +65,9 @@ def plot_slice(slice_img, ax, dim, slice_axis, box_size, galaxies=False, dm=Fals
                     vmin=0,
                     vmax=1)
 
-    #  ax.contour(slice_img.T, extent=extent, extend='both',
-    #             linewidths=0.5, alpha=0.5,
-    #             cmap=plt.cm.Greys_r)
+    ax.contour(slice_img.T, extent=extent, extend='both',
+               linewidths=0.5, alpha=0.5,
+               cmap=plt.cm.Greys_r)
 
     if color_bar:
         cbar = fig.colorbar(cax,)
diff --git a/meraxes/src/core/dracarys.c b/meraxes/src/core/dracarys.c
index 61cd94d..cc0d85b 100644
--- a/meraxes/src/core/dracarys.c
+++ b/meraxes/src/core/dracarys.c
@@ -82,6 +82,9 @@ void dracarys(run_globals_t *run_globals)
   trees_info_t *snapshot_trees_info = run_globals->SnapshotTreesInfo;
   double *LTTime                    = run_globals->LTTime;
   
+  float HII_eff_factor_original;
+  float f_esc;
+
   // Find what the last requested output snapshot is
   for (int ii = 0; ii < NOUT; ii++)
     if (run_globals->ListOutputSnaps[ii] > last_snap)
@@ -407,16 +410,30 @@ void dracarys(run_globals_t *run_globals)
 #ifdef USE_TOCF
     
     physics_params_t *params = &(run_globals->params.physics);
+    HII_eff_factor_original = tocf_params.HII_eff_factor;
     
     if (params->Flag_RedshiftDepEscFrac)
     {
-        float f_esc = 0.04*(powf((1.0+run_globals->ZZ[snapshot])/6.0, 2.5));
+        SID_log("Calculating f_esc(z)...", SID_LOG_OPEN);
+        SID_log("Set value of tocf_params.HII_eff_factor = %g", SID_LOG_COMMENT, tocf_params.HII_eff_factor);
+        
+        tocf_params.HII_eff_factor /= params->ReionEscapeFrac;
+        
+        f_esc = 0.04*(pow((1.0+run_globals->ZZ[snapshot])/6.0, 2.5));
         
         if (f_esc > 1.0)
             f_esc = 1.0;
         
-        params->ReionEscapeFrac = (double)f_esc;
         SID_log("f_esc = %g", SID_LOG_COMMENT, f_esc);
+        
+        tocf_params.HII_eff_factor *= f_esc;
+        
+        SID_log("Reset value of tocf_params.HII_eff_factor = %g", SID_LOG_COMMENT, tocf_params.HII_eff_factor);
+        SID_log("done...", SID_LOG_CLOSE);
+    }
+    else
+    {
+        f_esc = params->ReionEscapeFrac;
     }
     
     if (run_globals->params.TOCF_Flag && !check_if_reionization_complete(run_globals))
@@ -426,10 +443,17 @@ void dracarys(run_globals_t *run_globals)
         // We are decoupled, so no need to run 21cmFAST unless we are ouputing this snapshot
         for (int i_out = 0; i_out < NOUT; i_out++)
           if (snapshot == run_globals->ListOutputSnaps[i_out])
-            call_find_HII_bubbles(run_globals, snapshot, trees_info.unsampled_snapshot, nout_gals);
+            call_find_HII_bubbles(run_globals, snapshot, trees_info.unsampled_snapshot, nout_gals, f_esc);
       }
       else
-        call_find_HII_bubbles(run_globals, snapshot, trees_info.unsampled_snapshot, nout_gals);
+        call_find_HII_bubbles(run_globals, snapshot, trees_info.unsampled_snapshot, nout_gals, f_esc);
+    }
+    
+    // Set tocf_params.HII_eff_factor back to original
+    if (params->Flag_RedshiftDepEscFrac)
+    {
+        tocf_params.HII_eff_factor = HII_eff_factor_original;
+        SID_log("Re-reset value of tocf_params.HII_eff_factor = %g", SID_LOG_COMMENT, tocf_params.HII_eff_factor);
     }
     
 #endif
diff --git a/meraxes/src/core/galaxies.c b/meraxes/src/core/galaxies.c
index 88830aa..f1cbe5e 100644
--- a/meraxes/src/core/galaxies.c
+++ b/meraxes/src/core/galaxies.c
@@ -40,11 +40,13 @@ galaxy_t* new_galaxy(run_globals_t *run_globals, int snapshot, int halo_ID)
   gal->Mcool              = 0.0;
   gal->StellarMass        = 0.0;
   gal->GrossStellarMass   = 0.0;
-  gal->FescWeightedGSM    = 0.0;
   gal->MetalsStellarMass  = 0.0;
   gal->mwmsa_num          = 0.0;
   gal->mwmsa_denom        = 0.0;
-  gal->BlackHoleMass      = 0.0;
+  gal->BlackHoleMass      = 1e-7;
+  gal->BlackHoleAccretedHotMass      = 0.0;
+  gal->BlackHoleAccretedColdMass      = 0.0;
+  gal->BlackHoleAccretingColdMass      = 0.0;
   gal->MaxReheatFrac      = 0.0;
   gal->MaxEjectFrac       = 0.0;
   gal->Sfr                = 0.0;
@@ -54,6 +56,7 @@ galaxy_t* new_galaxy(run_globals_t *run_globals, int snapshot, int halo_ID)
   gal->MvirCrit           = 0.0;
   gal->PhysicsFlags       = 0;
   gal->MergerStartRadius  = 0.0;
+  gal->MergerStartRadius  = 0.0;
   gal->MergSnap           = 0;
 
   for (int ii = 0; ii < 3; ii++)
@@ -116,6 +119,8 @@ void reset_galaxy_properties(run_globals_t *run_globals, galaxy_t *gal, int snap
   // Here we reset any galaxy properties which are calculated on a snapshot by
   // snapshot basis.
   gal->Mcool              = 0.0;
+  gal->BlackHoleAccretedHotMass      = 0.0;
+  gal->BlackHoleAccretedColdMass      = 0.0;
   gal->Sfr                = 0.0;
   gal->BaryonFracModifier = 1.0;
   gal->MvirCrit           = 0.0;
diff --git a/meraxes/src/core/init.c b/meraxes/src/core/init.c
index 99991d0..cc0ee4e 100644
--- a/meraxes/src/core/init.c
+++ b/meraxes/src/core/init.c
@@ -181,6 +181,11 @@ static void set_units(run_globals_t *run_globals)
   // compute a few quantitites
   run_globals->RhoCrit = 3 * run_globals->Hubble * run_globals->Hubble / (8 * M_PI * run_globals->G);
 
+  if ((run_globals->params.physics.Flag_BHFeedback) && (run_globals->params.physics.Flag_BHReion)) 
+    run_globals->bh2star = (double)(run_globals->params.physics.ReionNionPhotPerBaryBH/run_globals->params.physics.ReionNionPhotPerBary*run_globals->params.physics.ReionEscapeFracBH/run_globals->params.physics.ReionEscapeFrac);
+  else
+    run_globals->bh2star = 0;
+
   // debug("UnitTime_in_s = %e\nUnitTime_in_Megayears = %e\nG = %e\nUnitDensity_in_cgs = %e\nUnitPressure_in_cgs = %e\nUnitCoolingRate_in_cgs = %e\nUnitEnergy_in_cgs = %e\n",
   //     units->UnitTime_in_s, units->UnitTime_in_Megayears, units->UnitDensity_in_cgs, units->UnitPressure_in_cgs, units->UnitCoolingRate_in_cgs, units->UnitEnergy_in_cgs);
   // ABORT(EXIT_SUCCESS);
diff --git a/meraxes/src/core/read_params.c b/meraxes/src/core/read_params.c
index 3316dca..cb1632d 100644
--- a/meraxes/src/core/read_params.c
+++ b/meraxes/src/core/read_params.c
@@ -81,7 +81,7 @@ static void inline store_params(
 
     if (tag_index < 0)
     {
-      SID_log_warning("%s is an unrecognised parameter (prefix='%s').", SID_LOG_COMMENT, entry[i_entry].key, prefix);
+      SID_log_warning("%s is an unrecognised parameter.", SID_LOG_COMMENT, entry[i_entry].key);
       ABORT(EXIT_FAILURE);
     }
 
@@ -363,6 +363,11 @@ void read_parameter_file(run_globals_t *run_globals, char *fname, int mode)
       required_tag[n_param]  = 1;
       params_type[n_param++] = PARAM_TYPE_INT;
 
+      strcpy(params_tag[n_param], "Flag_BHReion");
+      params_addr[n_param]   = &(run_params->physics).Flag_BHReion;
+      required_tag[n_param]  = 1;
+      params_type[n_param++] = PARAM_TYPE_INT;
+
       strcpy(params_tag[n_param], "Flag_IRA");
       params_addr[n_param]   = &(run_params->physics).Flag_IRA;
       required_tag[n_param]  = 1;
@@ -498,6 +503,11 @@ void read_parameter_file(run_globals_t *run_globals, char *fname, int mode)
       required_tag[n_param]  = 1;
       params_type[n_param++] = PARAM_TYPE_DOUBLE;
 
+      strcpy(params_tag[n_param], "QuasarModeEff");
+      params_addr[n_param]   = &(run_params->physics).QuasarModeEff;
+      required_tag[n_param]  = 1;
+      params_type[n_param++] = PARAM_TYPE_DOUBLE;
+
       strcpy(params_tag[n_param], "BlackHoleGrowthRate");
       params_addr[n_param]   = &(run_params->physics).BlackHoleGrowthRate;
       required_tag[n_param]  = 1;
@@ -533,11 +543,21 @@ void read_parameter_file(run_globals_t *run_globals, char *fname, int mode)
       required_tag[n_param]  = 1;
       params_type[n_param++] = PARAM_TYPE_DOUBLE;
 
+      strcpy(params_tag[n_param], "ReionNionPhotPerBaryBH");
+      params_addr[n_param]   = &(run_params->physics).ReionNionPhotPerBaryBH;
+      required_tag[n_param]  = 1;
+      params_type[n_param++] = PARAM_TYPE_DOUBLE;
+
       strcpy(params_tag[n_param], "ReionEscapeFrac");
       params_addr[n_param]   = &(run_params->physics).ReionEscapeFrac;
       required_tag[n_param]  = 1;
       params_type[n_param++] = PARAM_TYPE_DOUBLE;
 
+      strcpy(params_tag[n_param], "ReionEscapeFracBH");
+      params_addr[n_param]   = &(run_params->physics).ReionEscapeFracBH;
+      required_tag[n_param]  = 1;
+      params_type[n_param++] = PARAM_TYPE_DOUBLE;
+
       strcpy(params_tag[n_param], "ReionGnedin_z0");
       params_addr[n_param]   = &(run_params->physics).ReionGnedin_z0;
       required_tag[n_param]  = 1;
diff --git a/meraxes/src/core/save.c b/meraxes/src/core/save.c
index 7eee6e0..bfc7367 100644
--- a/meraxes/src/core/save.c
+++ b/meraxes/src/core/save.c
@@ -103,8 +103,9 @@ void prepare_galaxy_for_output(
   galout->Mcool              = (float)(gal.Mcool);
   galout->StellarMass        = (float)(gal.StellarMass);
   galout->GrossStellarMass   = (float)(gal.GrossStellarMass);
-  galout->FescWeightedGSM    = (float)(gal.FescWeightedGSM);
   galout->BlackHoleMass      = (float)(gal.BlackHoleMass);
+  galout->BlackHoleAccretedHotMass      = (float)(gal.BlackHoleAccretedHotMass);
+  galout->BlackHoleAccretedColdMass      = (float)(gal.BlackHoleAccretedColdMass);
   galout->MaxReheatFrac      = (float)(gal.MaxReheatFrac);
   galout->MaxEjectFrac       = (float)(gal.MaxEjectFrac);
   galout->DiskScaleLength    = (float)(gal.DiskScaleLength);
@@ -138,7 +139,7 @@ void calc_hdf5_props(run_globals_t *run_globals)
   galaxy_output_t galout;
   int i;                                                // dummy
 
-  h5props->n_props = 40;
+  h5props->n_props = 42;
 
 #ifdef CALC_MAGS
   // If we are calculating any magnitudes then increment the number of
@@ -357,13 +358,6 @@ void calc_hdf5_props(run_globals_t *run_globals)
   h5props->field_h_conv[i]    = "v/h";
   h5props->field_types[i++]   = H5T_NATIVE_FLOAT;
 
-  h5props->dst_offsets[i]     = HOFFSET(galaxy_output_t, FescWeightedGSM);
-  h5props->dst_field_sizes[i] = sizeof(galout.FescWeightedGSM);
-  h5props->field_names[i]     = "FescWeightedGSM";
-  h5props->field_units[i]     = "1e10 solMass";
-  h5props->field_h_conv[i]    = "v/h";
-  h5props->field_types[i++]   = H5T_NATIVE_FLOAT;
-
   h5props->dst_offsets[i]     = HOFFSET(galaxy_output_t, MetalsStellarMass);
   h5props->dst_field_sizes[i] = sizeof(galout.MetalsStellarMass);
   h5props->field_names[i]     = "MetalsStellarMass";
@@ -399,6 +393,20 @@ void calc_hdf5_props(run_globals_t *run_globals)
   h5props->field_h_conv[i]    = "v/h";
   h5props->field_types[i++]   = H5T_NATIVE_FLOAT;
 
+  h5props->dst_offsets[i]     = HOFFSET(galaxy_output_t, BlackHoleAccretedHotMass);
+  h5props->dst_field_sizes[i] = sizeof(galout.BlackHoleAccretedHotMass);
+  h5props->field_names[i]     = "BlackHoleAccretedHotMass";
+  h5props->field_units[i]     = "1e10 solMass";
+  h5props->field_h_conv[i]    = "v/h";
+  h5props->field_types[i++]   = H5T_NATIVE_FLOAT;
+
+  h5props->dst_offsets[i]     = HOFFSET(galaxy_output_t, BlackHoleAccretedColdMass);
+  h5props->dst_field_sizes[i] = sizeof(galout.BlackHoleAccretedColdMass);
+  h5props->field_names[i]     = "BlackHoleAccretedColdMass";
+  h5props->field_units[i]     = "1e10 solMass";
+  h5props->field_h_conv[i]    = "v/h";
+  h5props->field_types[i++]   = H5T_NATIVE_FLOAT;
+
   h5props->dst_offsets[i]     = HOFFSET(galaxy_output_t, MaxReheatFrac);
   h5props->dst_field_sizes[i] = sizeof(galout.MaxReheatFrac);
   h5props->field_names[i]     = "MaxReheatFrac";
@@ -633,6 +641,8 @@ void create_master_file(run_globals_t *run_globals)
 
       source_file_id = H5Fopen(source_file, H5F_ACC_RDONLY, H5P_DEFAULT);
       H5TBget_table_info(source_file_id, source_ds, NULL, &core_n_gals);
+      H5LTget_attribute_double(source_file_id, source_ds, "GlobalIonizingEmissivity", &temp);
+      global_ionizing_emissivity += temp;
       snap_n_gals                += (int)core_n_gals;
 
       if (i_core == 0)
@@ -693,6 +703,9 @@ void create_master_file(run_globals_t *run_globals)
       H5Fclose(source_file_id);
     }
 
+    // save the global ionizing emissivity at this snapshot
+    h5_write_attribute(snap_group_id, "GlobalIonizingEmissivity", H5T_NATIVE_DOUBLE, ds_id, &global_ionizing_emissivity);
+
     // save the total number of galaxies at this snapshot
     h5_write_attribute(snap_group_id, "NGalaxies", H5T_NATIVE_INT, ds_id, &snap_n_gals);
 
@@ -782,6 +795,7 @@ void write_snapshot(
   int prev_snapshot           = -1;
   int index                   = -1;
   int write_count             = 0;
+  double temp                 = 0;
 
   SID_log("Writing output file (n_write = %d)...", SID_LOG_OPEN | SID_LOG_TIMER, n_write);
 
@@ -967,6 +981,11 @@ void write_snapshot(
   // Free the output buffer
   SID_free(SID_FARG output_buffer);
 
+  // Store the global ionizing emmisivity contribution from this core
+  temp  = global_ionizing_emmisivity(run_globals);
+  temp *= pow(run_globals->params.Hubble_h, 3);  // Factor out hubble constants
+  H5LTset_attribute_double(group_id, "Galaxies", "GlobalIonizingEmissivity", &temp, 1);
+
 #ifdef USE_TOCF
   if (run_globals->params.TOCF_Flag && !check_if_reionization_complete(run_globals))
     save_tocf_grids(run_globals, group_id, run_globals->ListOutputSnaps[i_out]);
diff --git a/meraxes/src/core/tocf_reionization.c b/meraxes/src/core/tocf_reionization.c
index 1e8ecd0..9d7be92 100644
--- a/meraxes/src/core/tocf_reionization.c
+++ b/meraxes/src/core/tocf_reionization.c
@@ -10,23 +10,16 @@
 void set_HII_eff_factor(run_globals_t *run_globals)
 {
   // Use the params passed to Meraxes via the input file to set the HII ionising efficiency factor
-  physics_params_t *params = &(run_globals->params.physics);
 
-  // If we are using a redshift dependent escape fraction then reset
-  // ReionEscapeFrac to one as we don't want to inlcude it in the
-  // HII_eff_factor (it will be included in the stellar mass and SFR grids sent
-  // to 21cmFAST instead).
-  if (params->Flag_RedshiftDepEscFrac)
-  {
-    SID_log("Flag_RedshiftDepEscFrac is on => setting ReionEscapeFrac = 1.", SID_LOG_COMMENT);
-    params->ReionEscapeFrac = 1.0;
-  }
+  physics_params_t *params = &(run_globals->params.physics);
 
   // The following is based on Sobacchi & Messinger (2013) eqn 7
   // with f_* removed and f_b added since we define f_coll as M_*/M_tot rather than M_vir/M_tot,
   // and also with the inclusion of the effects of the Helium fraction.
-  tocf_params.HII_eff_factor = 1.0 / run_globals->params.BaryonFrac
-    * params->ReionNionPhotPerBary * params->ReionEscapeFrac / (1.0 - 0.75*tocf_params.Y_He);
+  tocf_params.HII_eff_factor *= 459.0 / run_globals->params.BaryonFrac
+    * (params->ReionNionPhotPerBary / 4000.0)
+    * (params->ReionEscapeFrac / 0.15)
+    * (1.3072 / ((1.0 + 3.0*tocf_params.Y_He)*(1.0 - tocf_params.Y_He)));
 
   // Account for instantaneous recycling factor so that stellar mass is cumulative
   if (params->Flag_IRA)
@@ -35,8 +28,7 @@ void set_HII_eff_factor(run_globals_t *run_globals)
   SID_log("Set value of tocf_params.HII_eff_factor = %g", SID_LOG_COMMENT, tocf_params.HII_eff_factor);
 }
 
-
-void call_find_HII_bubbles(run_globals_t *run_globals, int snapshot, int unsampled_snapshot, int nout_gals)
+void call_find_HII_bubbles(run_globals_t *run_globals, int snapshot, int unsampled_snapshot, int nout_gals, float f_esc)
 {
   // Thin wrapper round find_HII_bubbles
 
@@ -54,8 +46,9 @@ void call_find_HII_bubbles(run_globals_t *run_globals, int snapshot, int unsampl
     return;
   }
 
-  // Construct the stellar mass grid
-  construct_stellar_grids(run_globals, snapshot);
+  // Construct the stellar mass grid XXXXXXXX
+  // Construct the ionizing source grid including stellar mass and effective black hole mass
+  construct_ionizing_source_grids(run_globals, snapshot, f_esc);
 
   SID_log("...done", SID_LOG_CLOSE);
 
@@ -264,14 +257,14 @@ int find_cell(float pos, double box_size)
 }
 
 
-void construct_stellar_grids(run_globals_t *run_globals, int snapshot)
+void construct_ionizing_source_grids(run_globals_t *run_globals, int snapshot, float f_esc)
 {
   galaxy_t *gal;
   int i, j, k;
   double box_size     = (double)(run_globals->params.BoxSize);
   double Hubble_h     = run_globals->params.Hubble_h;
-  float *stellar_grid = (float*)(run_globals->tocf_grids.stars);
-  float *sfr_grid     = (float*)(run_globals->tocf_grids.sfr);
+  float *ionizing_source_grid = (float*)(run_globals->tocf_grids.stars);
+  float *ionizing_source_formation_rate_grid     = (float*)(run_globals->tocf_grids.sfr);
   int HII_dim         = tocf_params.HII_dim;
   run_units_t *units  = &(run_globals->units);
   double tHubble      = hubble_time(run_globals, snapshot);
@@ -281,8 +274,8 @@ void construct_stellar_grids(run_globals_t *run_globals, int snapshot)
   // init the grid
   for (int ii = 0; ii < HII_TOT_FFT_NUM_PIXELS; ii++)
   {
-    *(stellar_grid + ii) = 0.0;
-    *(sfr_grid + ii)     = 0.0;
+    *(ionizing_source_grid + ii) = 0.0;
+    *(ionizing_source_formation_rate_grid + ii)     = 0.0;
   }
 
   // Loop through each valid galaxy and add its stellar mass to the appropriate cell
@@ -325,43 +318,49 @@ void construct_stellar_grids(run_globals_t *run_globals, int snapshot)
       assert((j >= 0) && (j < HII_dim));
       assert((k >= 0) && (k < HII_dim));
 
-      if (run_globals->params.physics.Flag_RedshiftDepEscFrac)
-      {
-        *(stellar_grid + HII_R_FFT_INDEX(i, j, k)) += gal->FescWeightedGSM;
-        *(sfr_grid + HII_R_FFT_INDEX(i, j, k))     += gal->FescWeightedGSM;
-      }
-      else
+      *(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) += gal->GrossStellarMass;
+      *(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k))     += gal->GrossStellarMass;
+      
+      if ((run_globals->params.physics.Flag_BHFeedback) && (run_globals->params.physics.Flag_BHReion))
       {
-        *(stellar_grid + HII_R_FFT_INDEX(i, j, k)) += gal->GrossStellarMass;
-        *(sfr_grid + HII_R_FFT_INDEX(i, j, k))     += gal->GrossStellarMass;
+        // a trick to include quasar radiation using current 21cmFAST code
+        // bh2star = fesc_BH/fesc * Ngamma_BH/Ngamma
+        // for ionizing_source_formation_rate_grid, need further convertion due to different UV spectral index of quasar and stellar component
+        // *0.36 is ALPHA_UV_BH/ALPHA_UV defined in parameter_files/anal_params.h of 21cmfast-dragons !!!!!BE CAREFUL
+        // ALPHA_UV_BH = 1.8 from Loeb & Barkana 2000
+        // fesc_BH is assumed to be 1 and set from parameter files
+        // Ngamma_BH is assumed to be 18000 with accretion efficiency equal to be 0.1
+        // which is calculated from 11000 with accretion efficiency equal to be 0.06 in Loeb & Barkana 2000
+        *(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) += gal->BlackHoleMass * run_globals->bh2star*run_globals->params.physics.ReionEscapeFrac/f_esc;
+        *(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k))     += gal->BlackHoleMass * run_globals->bh2star *run_globals->params.physics.ReionEscapeFrac /f_esc *0.36;
       }
     }
     gal = gal->Next;
   }
 
   // Collect all grid cell values onto rank 0 which will actually call 21cmFAST
-  SID_Allreduce(SID_IN_PLACE, stellar_grid, HII_TOT_FFT_NUM_PIXELS, SID_FLOAT, SID_SUM, SID.COMM_WORLD);
-  SID_Allreduce(SID_IN_PLACE, sfr_grid, HII_TOT_FFT_NUM_PIXELS, SID_FLOAT, SID_SUM, SID.COMM_WORLD);
+  SID_Allreduce(SID_IN_PLACE, ionizing_source_grid, HII_TOT_FFT_NUM_PIXELS, SID_FLOAT, SID_SUM, SID.COMM_WORLD);
+  SID_Allreduce(SID_IN_PLACE, ionizing_source_formation_rate_grid, HII_TOT_FFT_NUM_PIXELS, SID_FLOAT, SID_SUM, SID.COMM_WORLD);
 
   if (SID.My_rank == 0)
   {
     // Do one final pass to put the grid in the correct (real) units (Msol or
-    // Msol/s) and divide the sfr_grid by tHubble in order to convert the
+    // Msol/s) and divide the ionizing_source_formation_rate_grid by tHubble in order to convert the
     // stellar masses recorded into SFRs.
     for (int i = 0; i < HII_dim; i++)
       for (int j = 0; j < HII_dim; j++)
         for (int k = 0; k < HII_dim; k++)
         {
-          if (*(stellar_grid + HII_R_FFT_INDEX(i, j, k)) > 0)
-            *(stellar_grid + HII_R_FFT_INDEX(i, j, k)) *= (1.e10 / Hubble_h);
-          if (*(sfr_grid + HII_R_FFT_INDEX(i, j, k)) > 0)
-            *(sfr_grid + HII_R_FFT_INDEX(i, j, k)) *= (units->UnitMass_in_g / units->UnitTime_in_s / SOLAR_MASS) / tHubble;
+          if (*(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) > 0)
+            *(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) *= (1.e10 / Hubble_h);
+          if (*(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k)) > 0)
+            *(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k)) *= (units->UnitMass_in_g / units->UnitTime_in_s / SOLAR_MASS) / tHubble;
 
           // Check for under/overflow
-          if (*(stellar_grid + HII_R_FFT_INDEX(i, j, k)) < 0)
-            *(stellar_grid + HII_R_FFT_INDEX(i, j, k)) = 0;
-          if (*(sfr_grid + HII_R_FFT_INDEX(i, j, k)) < 0)
-            *(sfr_grid + HII_R_FFT_INDEX(i, j, k)) = 0;
+          if (*(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) < 0)
+            *(ionizing_source_grid + HII_R_FFT_INDEX(i, j, k)) = 0;
+          if (*(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k)) < 0)
+            *(ionizing_source_formation_rate_grid + HII_R_FFT_INDEX(i, j, k)) = 0;
         }
   }
 
@@ -411,9 +410,6 @@ void save_tocf_grids(run_globals_t *run_globals, hid_t parent_group_id, int snap
 
     H5LTset_attribute_float(group_id, "xH", "global_xH", &(grids->global_xH), 1);
 
-    // Save the escape fraction if we are using a redshift dependent escape fraction
-    H5LTset_attribute_double(group_id, ".", "ReionEscapeFrac", &(run_globals->params.physics.ReionEscapeFrac), 1);
-
     // fftw padded grids
     grid = (float*)SID_calloc(HII_TOT_NUM_PIXELS * sizeof(float));
 
diff --git a/meraxes/src/meraxes.h b/meraxes/src/meraxes.h
index 08b9fb3..902b82a 100644
--- a/meraxes/src/meraxes.h
+++ b/meraxes/src/meraxes.h
@@ -89,6 +89,7 @@ typedef struct physics_params_t {
   double EnergyPerSN;
   double IMFNormConst;
   double RadioModeEff;
+  double QuasarModeEff;
   double BlackHoleGrowthRate;
 
   double ThreshMajorMerger;
@@ -100,7 +101,9 @@ typedef struct physics_params_t {
 
   // TODO: These parameters should be used to set the TOCF HII_EFF_FACTOR value
   double ReionNionPhotPerBary;
+  double ReionNionPhotPerBaryBH;
   double ReionEscapeFrac;
+  double ReionEscapeFracBH;
   double ReionTcool;
 
   double ReionSobacchi_Zre;
@@ -115,6 +118,7 @@ typedef struct physics_params_t {
   int Flag_RedshiftDepEscFrac;
   int Flag_ReionizationModifier;
   int Flag_BHFeedback;
+  int Flag_BHReion;
   int Flag_IRA;
   int Flag_FixDiskRadiusOnInfall;
   int Flag_FixVmaxOnInfall;
@@ -315,13 +319,15 @@ typedef struct galaxy_t {
   double Mcool;
   double StellarMass;
   double GrossStellarMass;
-  double FescWeightedGSM;  //!< ReionEscapeFrac weighted GrossStellarMass
   double MetalsStellarMass;
   double DiskScaleLength;
   double Sfr;
   double EjectedGas;
   double MetalsEjectedGas;
   double BlackHoleMass;
+  double BlackHoleAccretedHotMass;
+  double BlackHoleAccretedColdMass;
+  double BlackHoleAccretingColdMass;
   double MaxReheatFrac;
   double MaxEjectFrac;
 
@@ -390,12 +396,13 @@ typedef struct galaxy_output_t {
   float DiskScaleLength;
   float StellarMass;
   float GrossStellarMass;
-  float FescWeightedGSM;  //!< ReionEscapeFrac weighted GrossStellarMass
   float MetalsStellarMass;
   float Sfr;
   float EjectedGas;
   float MetalsEjectedGas;
   float BlackHoleMass;
+  float BlackHoleAccretedHotMass;
+  float BlackHoleAccretedColdMass;
   float MaxReheatFrac;
   float MaxEjectFrac;
 
@@ -487,6 +494,7 @@ typedef struct run_globals_t {
   double              Hubble;
   double              RhoCrit;
   double              G;
+  double              bh2star;
 
   int                 LastOutputSnap;
   int                 NGhosts;
@@ -559,8 +567,9 @@ double       gas_cooling(run_globals_t *run_globals, galaxy_t *gal);
 void         cool_gas_onto_galaxy(galaxy_t *gal, double cooling_mass);
 double       calc_metallicity(double total_gas, double metals);
 void         reincorporate_ejected_gas(run_globals_t *run_globals, galaxy_t *gal);
-double       radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double cooling_mass);
-void         merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal, double merger_ratio);
+double       radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double cooling_mass, double x);
+void         merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal, double merger_ratio, int snapshot);
+void         previous_merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal);
 
 // Magnitude related
 void   init_luminosities(run_globals_t *run_globals, galaxy_t *gal);
@@ -576,17 +585,18 @@ void   read_Mcrit_table(run_globals_t *run_globals);
 double reionization_modifier(run_globals_t *run_globals, galaxy_t *gal, double Mvir, float *Pos, int snapshot);
 double sobacchi2013_modifier(run_globals_t *run_globals, double Mvir, double redshift);
 double gnedin2000_modifer(run_globals_t *run_globals, double Mvir, double redshift);
+double global_ionizing_emmisivity(run_globals_t *run_globals);
 #ifdef USE_TOCF
 double tocf_modifier(run_globals_t *run_globals, galaxy_t *gal, double Mvir, float *Pos, int snapshot);
 void   set_HII_eff_factor(run_globals_t *run_globals);
 int    find_cell(float pos, double box_size);
 void   malloc_reionization_grids(run_globals_t *run_globals);
 void   free_reionization_grids(run_globals_t *run_globals);
-void   construct_stellar_grids(run_globals_t *run_globals, int snapshot);
+void   construct_ionizing_source_grids(run_globals_t *run_globals, int snapshot, float f_esc);
 // void    assign_ionization_to_halos(run_globals_t *run_globals, halo_t *halo, int n_halos, float *xH_grid, int xH_dim);
 int  read_dm_grid(run_globals_t *run_globals, int snapshot, int i_grid, float *grid);
 void calculate_Mvir_crit(run_globals_t *run_globals, double redshift);
-void call_find_HII_bubbles(run_globals_t *run_globals, int snapshot, int unsampled_snapshot, int nout_gals);
+void call_find_HII_bubbles(run_globals_t *run_globals, int snapshot, int unsampled_snapshot, int nout_gals, float f_esc);
 void save_tocf_grids(run_globals_t *run_globals, hid_t group_id, int snapshot);
 bool check_if_reionization_complete(run_globals_t *run_globals);
 #endif
diff --git a/meraxes/src/physics/blackhole_feedback.c b/meraxes/src/physics/blackhole_feedback.c
index 5d47ad5..39fe7f9 100644
--- a/meraxes/src/physics/blackhole_feedback.c
+++ b/meraxes/src/physics/blackhole_feedback.c
@@ -1,7 +1,57 @@
 #include "meraxes.h"
 #include <math.h>
+#include <assert.h> 
 
-double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double cooling_mass)
+#define eta 0.06 //standard efficiency, 10% accreted mass is radiated 
+
+// quasar feedback suggested by Croton et al. 2016
+void update_reservoirs_from_quasar_mode_bh_feedback(run_globals_t *run_globals, galaxy_t *gal, double m_reheat)
+{
+    double metallicity; 
+    galaxy_t *central;
+
+    if (gal->ghost_flag)
+        central = gal; 
+    else
+        central = gal->Halo->FOFGroup->FirstOccupiedHalo->Galaxy;   
+
+    if (m_reheat < gal->ColdGas)
+    {
+        metallicity = calc_metallicity(gal->ColdGas, gal->MetalsColdGas);
+        gal->ColdGas          -= m_reheat;
+        gal->MetalsColdGas    -= m_reheat * metallicity; 
+        central->MetalsHotGas += m_reheat * metallicity;
+        central->HotGas       += m_reheat;              
+    }
+    else
+    {
+        metallicity = calc_metallicity(central->HotGas, central->MetalsHotGas);
+        gal->ColdGas               = 0.0;
+        gal->MetalsColdGas         = 0.0;
+        central->HotGas           -= m_reheat;
+        central->MetalsHotGas     -= m_reheat * metallicity;
+        central->EjectedGas       += m_reheat;              
+        central->MetalsEjectedGas += m_reheat * metallicity;
+    }
+
+    // Check the validity of the modified reservoir values (HotGas can be negtive for too strong quasar feedback)
+    if (central->HotGas < 0)          
+      central->HotGas = 0.0;          
+    if (central->MetalsHotGas < 0)    
+      central->MetalsHotGas = 0.0;    
+    if (gal->ColdGas < 0)             
+      gal->ColdGas = 0.0;             
+    if (gal->MetalsColdGas < 0)       
+      gal->MetalsColdGas = 0.0;       
+    if (gal->StellarMass < 0)         
+      gal->StellarMass = 0.0;         
+    if (central->EjectedGas < 0)      
+      central->EjectedGas = 0.0;      
+    if (central->MetalsEjectedGas < 0)
+      central->MetalsEjectedGas = 0.0;
+}
+
+double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double cooling_mass, double x)
 {
   double accretion_rate;
   double eddington_rate;
@@ -16,18 +66,18 @@ double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double c
   // if there is any hot gas
   if (gal->HotGas > 0.0)
   {
-    // empirical accretion recipe of Croton et al. (2006)
+
+    //Bondi-Hoyle accretion model
     accretion_rate = run_globals->params.physics.RadioModeEff
-                     / (units->UnitMass_in_g / units->UnitTime_in_s * SEC_PER_YEAR / SOLAR_MASS)
-                     * (gal->BlackHoleMass / 0.01) * pow(fof_group->Vvir / 200.0, 3.0)
-                     * ((gal->HotGas / fof_group->Mvir) / 0.1);
+                    * run_globals->G * 1.7377 * x * gal->BlackHoleMass;
+    // 15/16*pi*mu=1.7377, with mu=0.59; x=k*m_p*T/Lambda
 
     // Eddington rate
-    eddington_rate = 1.3e48 * gal->BlackHoleMass / (units->UnitEnergy_in_cgs / units->UnitTime_in_s) / 9e10;
+    eddington_rate = 1.4e37 / (units->UnitEnergy_in_cgs / units->UnitTime_in_s) * gal->BlackHoleMass;
 
     // limit accretion by the eddington rate
-    if (accretion_rate > eddington_rate)
-      accretion_rate = eddington_rate;
+    if (eta * accretion_rate > eddington_rate)
+      accretion_rate = eddington_rate/eta;
 
     accreted_mass = accretion_rate * gal->dt;
 
@@ -35,9 +85,10 @@ double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double c
     if (accreted_mass > gal->HotGas)
       accreted_mass = gal->HotGas;
 
+    gal->BlackHoleAccretedHotMass = accreted_mass;
+
     // mass heated by AGN following Croton et al. 2006
-    // 1.34e5 = sqrt(2*eta*c^2), eta=0.1 (standard efficiency) and c in km/s
-    heated_mass = (1.34e5 / fof_group->Vvir) * (1.34e5 / fof_group->Vvir) * accreted_mass;
+    heated_mass = 2.*eta*(3e5 / fof_group->Vvir) * (3e5 / fof_group->Vvir) * accreted_mass;
 
     // limit the amount of heating to the amount of cooling
     if (heated_mass > cooling_mass)
@@ -48,7 +99,7 @@ double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double c
 
     // add the accreted mass to the black hole
     metallicity         = calc_metallicity(gal->HotGas, gal->MetalsHotGas);
-    gal->BlackHoleMass += accreted_mass;
+    gal->BlackHoleMass += (1.-eta)*accreted_mass;
     gal->HotGas        -= accreted_mass;
     gal->MetalsHotGas  -= metallicity * accreted_mass;
   }
@@ -62,14 +113,69 @@ double radio_mode_BH_heating(run_globals_t *run_globals, galaxy_t *gal, double c
 }
 
 
-void merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal, double merger_ratio)
+void merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal, double merger_ratio, int snapshot)
 {
   if (gal->ColdGas > 0)
   {
     // If there is any cold gas to feed the black hole...
+    double m_reheat;
+    double eddington_rate;
+    double accreted_mass;
+    double accreted_metals;
+    double Vvir;
+    double zplus1to1pt5;
+    run_units_t *units = &(run_globals->units);
+
+    // If this galaxy is the central of it's FOF group then use the FOF halo properties
+    // TODO: This needs closer thought as to if this is the best thing to do...
+    if (gal->Type == 0)
+      Vvir = gal->Halo->FOFGroup->Vvir;
+    else
+      Vvir = gal->Vvir;
+
+    // Suggested by Bonoli et al. 2009 and Wyithe et al. 2003
+    zplus1to1pt5 = pow((1 + run_globals->ZZ[snapshot]), 1.5);
+
+	assert(gal->BlackHoleAccretingColdMass >=0);
+    gal->BlackHoleAccretingColdMass += run_globals->params.physics.BlackHoleGrowthRate * merger_ratio /
+                    (1.0 + (280.0 * 280.0 / Vvir / Vvir)) * gal->ColdGas * zplus1to1pt5;
+
+    // Eddington rate
+    eddington_rate = 1.4e37 / (units->UnitEnergy_in_cgs / units->UnitTime_in_s) * gal->BlackHoleMass;
+    accreted_mass = eddington_rate * gal->dt/eta;
+
+    // limit accretion to what is need
+    if (accreted_mass > gal->BlackHoleAccretingColdMass)
+      accreted_mass = gal->BlackHoleAccretingColdMass;
+
+    // limit accretion to what is available
+    if (accreted_mass > gal->ColdGas)
+      accreted_mass = gal->ColdGas;
+
+    gal->BlackHoleAccretedColdMass = accreted_mass;
+    gal->BlackHoleAccretingColdMass -= accreted_mass;
+
+    accreted_metals     = calc_metallicity(gal->ColdGas, gal->MetalsColdGas) * accreted_mass;
+    gal->BlackHoleMass += (1.-eta)*accreted_mass;
+    gal->ColdGas       -= accreted_mass;
+    gal->MetalsColdGas -= accreted_metals;
+
+    m_reheat = run_globals->params.physics.QuasarModeEff *eta*9e10 * accreted_mass /Vvir /Vvir;
+    update_reservoirs_from_quasar_mode_bh_feedback(run_globals, gal, m_reheat);
+  }
+}
+
+void previous_merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal)
+{
+  if ((gal->ColdGas > 0) && (gal->BlackHoleAccretingColdMass >0))
+  {
+    // If there is any cold gas to feed the black hole...
+    double m_reheat;
+    double eddington_rate;
     double accreted_mass;
     double accreted_metals;
     double Vvir;
+    run_units_t *units = &(run_globals->units);
 
     // If this galaxy is the central of it's FOF group then use the FOF halo properties
     // TODO: This needs closer thought as to if this is the best thing to do...
@@ -78,16 +184,27 @@ void merger_driven_BH_growth(run_globals_t *run_globals, galaxy_t *gal, double m
     else
       Vvir = gal->Vvir;
 
-    accreted_mass = run_globals->params.physics.BlackHoleGrowthRate * merger_ratio /
-                    (1.0 + (280.0 * 280.0 / Vvir / Vvir)) * gal->ColdGas;
+    // Eddington rate
+    eddington_rate = 1.4e37 / (units->UnitEnergy_in_cgs / units->UnitTime_in_s) * gal->BlackHoleMass;
+    accreted_mass = eddington_rate * gal->dt/eta;
+
+    // limit accretion to what is need
+    if (accreted_mass > gal->BlackHoleAccretingColdMass)
+      accreted_mass = gal->BlackHoleAccretingColdMass;
 
     // limit accretion to what is available
     if (accreted_mass > gal->ColdGas)
       accreted_mass = gal->ColdGas;
 
+    gal->BlackHoleAccretedColdMass = accreted_mass;
+    gal->BlackHoleAccretingColdMass -= accreted_mass;
+
     accreted_metals     = calc_metallicity(gal->ColdGas, gal->MetalsColdGas) * accreted_mass;
-    gal->BlackHoleMass += accreted_mass;
+    gal->BlackHoleMass += (1.-eta)*accreted_mass;
     gal->ColdGas       -= accreted_mass;
     gal->MetalsColdGas -= accreted_metals;
+
+    m_reheat = run_globals->params.physics.QuasarModeEff *eta*9e10 * accreted_mass /Vvir /Vvir;
+    update_reservoirs_from_quasar_mode_bh_feedback(run_globals, gal, m_reheat);
   }
 }
diff --git a/meraxes/src/physics/cooling.c b/meraxes/src/physics/cooling.c
index eb4615e..c6574be 100644
--- a/meraxes/src/physics/cooling.c
+++ b/meraxes/src/physics/cooling.c
@@ -77,7 +77,7 @@ double gas_cooling(run_globals_t *run_globals, galaxy_t *gal)
         cooling_mass = gal->HotGas;
 
       if (run_globals->params.physics.Flag_BHFeedback)
-        cooling_mass -= radio_mode_BH_heating(run_globals, gal, cooling_mass);
+        cooling_mass -= radio_mode_BH_heating(run_globals, gal, cooling_mass, x);
 
       if (cooling_mass < 0)
         cooling_mass = 0.0;
diff --git a/meraxes/src/physics/evolve.c b/meraxes/src/physics/evolve.c
index 9945817..eac1fb7 100644
--- a/meraxes/src/physics/evolve.c
+++ b/meraxes/src/physics/evolve.c
@@ -81,7 +81,11 @@ int evolve_galaxies(run_globals_t *run_globals, fof_group_t *fof_group, int snap
             // merged then process a merger event.
             if ((gal->MergTime < 0) || (gal->MergerTarget->Type == 3))
               merge_with_target(run_globals, gal, &dead_gals, snapshot);
+            else if (run_globals->params.physics.Flag_BHFeedback)
+              previous_merger_driven_BH_growth(run_globals, gal);
           }
+          else if (run_globals->params.physics.Flag_BHFeedback)
+            previous_merger_driven_BH_growth(run_globals, gal);
           gal = gal->NextGalInHalo;
         }
         halo = halo->NextHaloInFOFGroup;
diff --git a/meraxes/src/physics/mergers.c b/meraxes/src/physics/mergers.c
index ac3d9bb..541a369 100644
--- a/meraxes/src/physics/mergers.c
+++ b/meraxes/src/physics/mergers.c
@@ -168,7 +168,6 @@ void merge_with_target(run_globals_t *run_globals, galaxy_t *gal, int *dead_gals
   // Add galaxies together
   parent->StellarMass       += gal->StellarMass;
   parent->GrossStellarMass  += gal->GrossStellarMass;
-  parent->FescWeightedGSM   += gal->FescWeightedGSM;
   parent->MetalsStellarMass += gal->MetalsStellarMass;
   parent->Sfr               += gal->Sfr;
   parent->HotGas            += gal->HotGas;
@@ -190,7 +189,7 @@ void merge_with_target(run_globals_t *run_globals, galaxy_t *gal, int *dead_gals
 
   // TODO: Should this have a stellar mass / baryon limit placed on it?
   if (run_globals->params.physics.Flag_BHFeedback)
-    merger_driven_BH_growth(run_globals, parent, merger_ratio);
+    merger_driven_BH_growth(run_globals, parent, merger_ratio, snapshot);
 
   // merger driven starburst prescription
   min_stellar_mass = (gal->StellarMass <= parent->StellarMass) ? gal->StellarMass : parent->StellarMass;
diff --git a/meraxes/src/physics/reionization_modifiers.c b/meraxes/src/physics/reionization_modifiers.c
index 2454a4b..809cc5d 100644
--- a/meraxes/src/physics/reionization_modifiers.c
+++ b/meraxes/src/physics/reionization_modifiers.c
@@ -120,6 +120,30 @@ double gnedin2000_modifer(run_globals_t *run_globals, double Mvir, double redshi
 }
 
 
+double global_ionizing_emmisivity(run_globals_t *run_globals)
+{
+  galaxy_t *gal;
+  run_params_t *params     = &(run_globals->params);
+  double unit_conversion   = 0.0628063641739; // Converts internal SFR units to 1e51 baryons per second (mu=0.6)
+  double factor            = unit_conversion * params->physics.ReionNionPhotPerBary * params->physics.ReionEscapeFrac;
+  double global_emissivity = 0.0;
+  double volume            = params->VolumeFactor * pow(params->BoxSize, 3);
+
+  gal = run_globals->FirstGal;
+  while (gal != NULL)
+  {
+    // Orphans can't form stars in this model
+    if (gal->Type < 2)
+      global_emissivity += gal->Sfr;
+
+    gal = gal->Next;
+  }
+  global_emissivity *= factor / volume;  // Units: 1e51 ionising photons per second per (h^-3 Mpc)
+
+  return global_emissivity;
+}
+
+
 double reionization_modifier(run_globals_t *run_globals, galaxy_t *gal, double Mvir, float *Pos, int snapshot)
 {
   double redshift;
diff --git a/meraxes/src/physics/star_formation.c b/meraxes/src/physics/star_formation.c
index 69e233f..32389cb 100644
--- a/meraxes/src/physics/star_formation.c
+++ b/meraxes/src/physics/star_formation.c
@@ -24,7 +24,6 @@ void update_reservoirs_from_sf(run_globals_t *run_globals, galaxy_t *gal, double
     gal->MetalsColdGas     -= new_stars * metallicity;
     gal->StellarMass       += new_stars;
     gal->GrossStellarMass  += new_stars;
-    gal->FescWeightedGSM   += new_stars * run_globals->params.physics.ReionEscapeFrac;
     gal->MetalsStellarMass += new_stars * metallicity;
 
     // update the luminosities
